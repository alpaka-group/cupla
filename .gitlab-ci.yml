################################################################################
# CUPLA_CXX                             : {g++, clang++}
#   [g++]                               : {5, 6, 7, 8, 9} <list>
#   [clang++]                           : {4.0, 5.0, 6.0, 7, 8, 9, 10} <list>
# CUPLA_BOOST_VERSIONS                  : {1.65.1, 1.66.0, 1.67.0, 1.68.0, 1.69.0, 1.70.0, 1.71.0, 1.72.0, 1.73.0} <list>
# CUPLA_BUILD_TYPE                      : {Debug, Release}
# CUPLA_CMAKE_ARGS                      : <string>
include:
  - local: '/script/compiler_base.yml'

stages:
  - validate
  - compile-and-run

################################################################################
# Check code formation with clang-format
# pull request validation:
#   - check C++ code style
pull-request-validation:
  stage: validate
  image: ubuntu:focal
  script:
    - apt update
    # install clang-format-11
    - apt install -y -q gnupg2 wget
    - wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
    - echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main" | tee -a /etc/apt/sources.list
    - apt update
    - DEBIAN_FRONTEND=noninteractive apt install -y clang-format-11
    # Check C++ code style
    - source $CI_PROJECT_DIR/script/check_cpp_code_style.sh
  tags:
    - x86_64

cuda92:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-cuda92-gcc:1.4
  variables:
    CUPLA_CXX: "g++-6"
    # Workaround requires to enable debug build:
    # GCC-5.5 has broken avx512vlintrin.h in Release mode with NVCC 9.X
    #   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=76731
    #   https://github.com/tensorflow/tensorflow/issues/10220
    CUPLA_BUILD_TYPE: "Debug"
    CUPLA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0 1.68.0 1.69.0 1.70.0 1.71.0 1.72.0 1.73.0"
  extends: .base_cuda

cuda100:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-cuda100-gcc:1.4
  variables:
    CUPLA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0 1.68.0 1.69.0 1.70.0 1.71.0 1.72.0 1.73.0"
  extends: .base_cuda

cuda101:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-cuda101-gcc:1.4
  variables:
    CUPLA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0 1.68.0 1.69.0 1.70.0 1.71.0 1.72.0 1.73.0"
  extends: .base_cuda

cuda102:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-cuda102-gcc:1.4
  variables:
    CUPLA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0 1.68.0 1.69.0 1.70.0 1.71.0 1.72.0 1.73.0"
  extends: .base_cuda

gcc1:
  stage: compile-and-run
  variables:
    CUPLA_CXX: "g++-5 g++-6 g++-7 g++-8 g++-9"
    CUPLA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0"
  extends: .base_gcc

gcc2:
  stage: compile-and-run
  variables:
    CUPLA_CXX: "g++-5 g++-6 g++-7 g++-8 g++-9"
    CUPLA_BOOST_VERSIONS: "1.68.0 1.69.0 1.70.0"
  extends: .base_gcc

gcc3:
  stage: compile-and-run
  variables:
    CUPLA_CXX: "g++-5 g++-6 g++-7 g++-8 g++-9"
    CUPLA_BOOST_VERSIONS: "1.71.0 1.72.0 1.73.0"
  extends: .base_gcc

clang:
  stage: compile-and-run
  variables:
    CUPLA_CXX: "clang++-5.0 clang++-6.0 clang++-7 clang++-8 clang++-9 clang++-10 clang++-11"
    CUPLA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0 1.68.0 1.69.0 1.70.0 1.71.0 1.72.0 1.73.0"
  extends: .base_clang

cudaClang92:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-cuda92-clang:1.4
  variables:
    CUPLA_CXX: "clang++-8 clang++-10 clang++-11"
    CUPLA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0 1.68.0 1.69.0 1.70.0 1.71.0 1.72.0 1.73.0"
  extends: .base_cuda_clang

cudaClang100:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-cuda100-clang:1.4
  variables:
    CUPLA_CXX: "clang++-8 clang++-9 clang++-10 clang++-11"
    CUPLA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0 1.68.0 1.69.0 1.70.0 1.71.0 1.72.0 1.73.0"
  extends: .base_cuda_clang

cudaClang101:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-cuda101-clang:1.4
  variables:
    CUPLA_CXX: "clang++-9 clang++-10 clang++-11"
    CUPLA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0 1.68.0 1.69.0 1.70.0 1.71.0 1.72.0 1.73.0"
  extends: .base_cuda_clang

hip42:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-rocm4.2:1.4
  variables:
    CMAKE_MODULE_PATH: "/opt/rocm-4.2.0/hip/cmake"
    CUPLA_BOOST_VERSIONS: "1.65.1 1.66.0 1.67.0 1.68.0 1.69.0 1.70.0 1.71.0 1.72.0 1.73.0"
  extends: .base_hip

################################################################################
# CMake integration test
#

# build external project and use cupla via cmake add_subdirectory()
# use internal alpaka
addSubdirectoryInternal:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-gcc:1.4
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    CUPLA_BOOST_VERSION: 1.73.0
    CUPLA_ALPAKA_PROVIDER: "internal"
  script:
    - source script/integration/build_add_subdirectory.sh
  tags:
    - x86_64

# build external project and use cupla via cmake add_subdirectory()
# use installed alpaka
addSubdirectoryExternal:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-gcc:1.4
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    CUPLA_BOOST_VERSION: 1.73.0
    CUPLA_ALPAKA_PROVIDER: "external"
  script:
    - source script/integration/install_alpaka.sh
    - source script/integration/build_add_subdirectory.sh
  tags:
    - x86_64

# build external project and use cupla via cmake add_subdirectory()
# alpaka was included in the project cmake before cupla
addSubdirectoryThirdPartyAlpaka:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-gcc:1.4
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    CUPLA_BOOST_VERSION: 1.73.0
  script:
    - source script/integration/build_add_subdirectory_third_party_alpaka.sh
  tags:
    - x86_64

# build external project and use cupla via cmake find_package()
# cupla was installed with disabled examples
findPackageWithoutExample:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-gcc:1.4
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    CUPLA_BOOST_VERSION: 1.73.0
    CUPLA_BUILD_EXAMPLE: "OFF"
  script:
    - source script/integration/install_alpaka.sh
    - source script/integration/install_cupla.sh
    - source script/integration/build_find_package.sh
  tags:
    - x86_64

# build external project and use cupla via cmake find_package()
# cupla was installed with enabled examples
findPackageWithExample:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-gcc:1.4
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    CUPLA_BOOST_VERSION: 1.73.0
    CUPLA_BUILD_EXAMPLE: "ON"
  script:
    - source script/integration/install_alpaka.sh
    - source script/integration/install_cupla.sh
    - source script/integration/build_find_package.sh
  tags:
    - x86_64
