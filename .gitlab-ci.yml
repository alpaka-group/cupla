################################################################################
# CUPLA_CXX                             : {g++, clang++}
#   [g++]                               : {7, 8, 9, 10} <list>
#   [clang++]                           : {10, 11} <list>
# CUPLA_BOOST_VERSIONS                  : {1.74.0, 1.75.0} <list>
# CUPLA_BUILD_TYPE                      : {Debug, Release}
# CUPLA_CMAKE_ARGS                      : <string>
include:
  - local: '/script/compiler_base.yml'

stages:
  - validate
  - compile-and-run

################################################################################
# Check code formation with clang-format
# pull request validation:
#   - check C++ code style
pull-request-validation:
  stage: validate
  image: ubuntu:focal
  script:
    - apt update
    - apt install -y -q wget
    # source: https://github.com/muttleyxd/clang-tools-static-binaries/releases
    - wget https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-f3a37dd2/clang-format-12.0.1_linux-amd64
    - mv clang-format-12.0.1_linux-amd64 /usr/bin/clang-format
    - chmod +x /usr/bin/clang-format
    - clang-format --version
    # Check C++ code style
    - source $CI_PROJECT_DIR/script/check_cpp_code_style.sh
  tags:
    - x86_64

cuda110:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-cuda110-gcc:2.0
  variables:
    CUPLA_BOOST_VERSIONS: "1.74.0 1.75.0"
  extends: .base_cuda

cuda114:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-cuda114-gcc:2.0
  variables:
    CUPLA_BOOST_VERSIONS: "1.74.0 1.75.0"
  extends: .base_cuda

gcc1:
  stage: compile-and-run
  variables:
    CUPLA_CXX: "g++-7 g++-8 g++-9 g++-10"
    CUPLA_BOOST_VERSIONS: "1.74.0 1.75.0"
  extends: .base_gcc

gcc2:
  stage: compile-and-run
  variables:
    CUPLA_CXX: "g++-7 g++-8 g++-9 g++-10"
    CUPLA_BOOST_VERSIONS: "1.74.0 1.75.0"
  extends: .base_gcc

gcc3:
  stage: compile-and-run
  variables:
    CUPLA_CXX: "g++-7 g++-8 g++-9 g++-10"
    CUPLA_BOOST_VERSIONS: "1.74.0 1.75.0"
  extends: .base_gcc

clang:
  stage: compile-and-run
  variables:
    CUPLA_CXX: "clang++-10 clang++-11"
    CUPLA_BOOST_VERSIONS: "1.74.0 1.75.0"
  extends: .base_clang

cudaClang110:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-cuda110-clang:2.0
  variables:
    CUPLA_CXX: "clang++-11"
    CUPLA_BOOST_VERSIONS: "1.74.0 1.75.0"
  extends: .base_cuda_clang

cudaClang114:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-cuda114-clang:2.0
  variables:
    CUPLA_CXX: "clang++-11"
    CUPLA_BOOST_VERSIONS: "1.74.0 1.75.0"
  extends: .base_cuda_clang

hip43:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-rocm4.3:2.0
  variables:
    CMAKE_MODULE_PATH: "/opt/rocm-4.2.0/hip/cmake"
    CUPLA_BOOST_VERSIONS: "1.74.0 1.75.0"
  extends: .base_hip

hip45:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-rocm4.5:2.0
  variables:
    CMAKE_MODULE_PATH: "/opt/rocm-4.5.0/hip/cmake"
    CUPLA_BOOST_VERSIONS: "1.74.0 1.75.0"
  extends: .base_hip

################################################################################
# CMake integration test
#

# build external project and use cupla via cmake add_subdirectory()
# use internal alpaka
addSubdirectoryInternal:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-gcc:2.0
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    CUPLA_BOOST_VERSION: 1.74.0
    CUPLA_ALPAKA_PROVIDER: "internal"
  script:
    - source script/integration/build_add_subdirectory.sh
  tags:
    - x86_64

# build external project and use cupla via cmake add_subdirectory()
# use installed alpaka
addSubdirectoryExternal:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-gcc:2.0
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    CUPLA_BOOST_VERSION: 1.74.0
    CUPLA_ALPAKA_PROVIDER: "external"
  script:
    - source script/integration/install_alpaka.sh
    - source script/integration/build_add_subdirectory.sh
  tags:
    - x86_64

# build external project and use cupla via cmake add_subdirectory()
# alpaka was included in the project cmake before cupla
addSubdirectoryThirdPartyAlpaka:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-gcc:2.0
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    CUPLA_BOOST_VERSION: 1.74.0
  script:
    - source script/integration/build_add_subdirectory_third_party_alpaka.sh
  tags:
    - x86_64

# build external project and use cupla via cmake find_package()
# cupla was installed with disabled examples
findPackageWithoutExample:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-gcc:2.0
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    CUPLA_BOOST_VERSION: 1.74.0
    CUPLA_BUILD_EXAMPLE: "OFF"
  script:
    - source script/integration/install_alpaka.sh
    - source script/integration/install_cupla.sh
    - source script/integration/build_find_package.sh
  tags:
    - x86_64

# build external project and use cupla via cmake find_package()
# cupla was installed with enabled examples
findPackageWithExample:
  stage: compile-and-run
  image: registry.gitlab.com/hzdr/crp/alpaka-group-container/alpaka-ci-ubuntu20.04-gcc:2.0
  variables:
    GIT_SUBMODULE_STRATEGY: normal
    CUPLA_BOOST_VERSION: 1.74.0
    CUPLA_BUILD_EXAMPLE: "ON"
  script:
    - source script/integration/install_alpaka.sh
    - source script/integration/install_cupla.sh
    - source script/integration/build_find_package.sh
  tags:
    - x86_64
